{"opened file":[{"fileName":"try.java","data":"package sample.editor.controller;\n\nimport javafx.scene.control.TextField;\nimport javafx.scene.control.TreeItem;\nimport javafx.scene.control.TreeView;\nimport javafx.scene.input.Clipboard;\nimport javafx.scene.input.ClipboardContent;\nimport javafx.scene.input.MouseEvent;\nimport javafx.stage.Stage;\nimport org.apache.commons.io.FileUtils;\nimport org.fxmisc.richtext.StyleClassedTextArea;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class Utils {\n    private HashMap<String, String> fileAddresses;\n    private HashMap<String, String> dirAddresses;\n    private File selectedFile;\n    private DropDown dropDown;\n    private TreeItem<String> selectTreeItem;\n    private TreeView<String> fileTree;\n    private Stage window;\n    private StyleClassedTextArea codeArea;\n\n    public void removeHighlightedTxt(ArrayList<ArrayList<Integer>> coordinateList, StyleClassedTextArea currCodeArea, AtomicInteger currWordIndex) {\n        if (coordinateList.size()!=0) {\n            for (ArrayList<Integer> arrayList : coordinateList) {\n                currCodeArea.setStyleClass(arrayList.get(0), arrayList.get(1), \"removeFind\");\n            }\n            coordinateList.clear();\n            currWordIndex.set(0);\n        }\n    }\n\n    public void removeHighlightedTxtInRange(int start, int end, StyleClassedTextArea currCodeArea) {\n        currCodeArea.setStyleClass(start, end, \"find\");\n    }\n\n    public void highlightText(TextField textField, ArrayList<ArrayList<Integer>> coordinateList, AtomicInteger currWordIndex, StyleClassedTextArea currCodeArea) {\n        removeHighlightedTxt(coordinateList, currCodeArea, currWordIndex);\n        Pattern pattern = Pattern.compile(\"\\\\b(\"+textField.getText()+\")\\\\b\");\n        Matcher matcher = pattern.matcher(currCodeArea.getText());\n        while (matcher.find()) {\n            currCodeArea.setStyleClass(matcher.start(), matcher.end(), \"find\");\n            coordinateList.add(new ArrayList<>(Arrays.asList(matcher.start(), matcher.end())));\n        }\n        if (coordinateList.size()!=0) currCodeArea.getCaretSelectionBind().moveTo(coordinateList.get(0).get(0));\n    }\n\n    public void gotoNextWord(ArrayList<ArrayList<Integer>> coordinateList, AtomicInteger currWordIndex, StyleClassedTextArea codeArea) {\n        if (currWordIndex.get() >= (coordinateList.size()-1) && coordinateList.size()!=0) return;\n        currWordIndex.incrementAndGet();\n        int index = currWordIndex.get();\n        codeArea.getCaretSelectionBind().moveTo(coordinateList.get(currWordIndex.get()).get(0));\n        codeArea.setStyleClass(coordinateList.get(index).get(0), coordinateList.get(index).get(1), \"findActive\");\n        removeHighlightedTxtInRange(coordinateList.get(index-1).get(0), coordinateList.get(index-1).get(1), codeArea);\n    }\n\n    public void gotoPrevWord(ArrayList<ArrayList<Integer>> coordinateList, AtomicInteger currWordIndex, StyleClassedTextArea codeArea) {\n        if (currWordIndex.get() <= 0 && coordinateList.size()!=0) return;\n        currWordIndex.decrementAndGet();\n        int index = currWordIndex.get();\n        codeArea.setStyleClass(coordinateList.get(index).get(0), coordinateList.get(index).get(1), \"findActive\");\n        codeArea.getCaretSelectionBind().moveTo(coordinateList.get(currWordIndex.get()).get(0));\n        removeHighlightedTxtInRange(coordinateList.get(index+1).get(0), coordinateList.get(index+1).get(1), codeArea);\n    }\n\n    public String getExtension(String fileName) {\n        String [] arr = fileName.split(\"\\\\.\");\n        return arr[arr.length-1];\n    }\n\n    public void configureFileTypes(HashMap<String, String> fileTypes) {\n        fileTypes.put(\"txt\", \"Plain Text\");\n        fileTypes.put(\"java\", \"Java\");\n        fileTypes.put(\"py\", \"Python\");\n        fileTypes.put(\"c\", \"C\");\n        fileTypes.put(\"cpp\", \"C++\");\n        fileTypes.put(\"cs\", \"C Sharp\");\n        fileTypes.put(\"html\", \"Hypertext Markup Language\");\n        fileTypes.put(\"htm\", \"Hypertext Markup Language\");\n        fileTypes.put(\"css\", \"Cascading Style Sheets\");\n        fileTypes.put(\"xml\", \"Extensible Markup Language\");\n        fileTypes.put(\"fxml\", \"FX Markup Language\");\n        fileTypes.put(\"js\", \"Java Script\");\n        fileTypes.put(\"ts\", \"Type Script\");\n        fileTypes.put(\"iml\", \"International Microgravity Laboratory\");\n        fileTypes.put(\"json\", \"JavaScript Object Notation\");\n        fileTypes.put(\"md\", \"MarkDown\");\n    }\n\n    public DropDown createContextMenuForFileTree(File file, HashMap<String, String> fileAddresses, HashMap<String, String> dirAddresses, TreeItem<String> item, Stage window, StyleClassedTextArea codeArea, TreeView<String> fileTree) {\n        this.codeArea = codeArea;\n        this.fileTree = fileTree;\n        this.dropDown = new DropDown();\n        this.selectTreeItem = item;\n        this.fileAddresses = fileAddresses;\n        this.dirAddresses = dirAddresses;\n        this.selectedFile = file;\n        this.window = window;\n\n        if (file.isFile()) {\n            DropDownItem revealInExplorer = new DropDownItem(this::revealInFileExplorerMet, \"Reveal in File Explorer\");\n            DropDownItem copyFilePath = new DropDownItem(this::copyFilePath, \"Copy Path\");\n            DropDownItem copyRelativeFilePath = new DropDownItem(this::copyRelativeFilePath, \"Copy Relative Path\");\n            DropDownItem separator = new DropDownItem();\n            DropDownItem renameFile = new DropDownItem(this::renameFile, \"Rename\");\n            DropDownItem deleteFile = new DropDownItem(this::deleteFile, \"Delete\");\n            dropDown.addAllItems(revealInExplorer, copyFilePath, copyRelativeFilePath, separator, renameFile, deleteFile);\n        } else if (file.isDirectory()) {\n            DropDownItem newFile = new DropDownItem(this::newFile, \"New File\");\n            DropDownItem newFolder = new DropDownItem(this::newFolder, \"New Folder\");\n            DropDownItem separator1 = new DropDownItem();\n            DropDownItem separator2 = new DropDownItem();\n            DropDownItem revealInExplorer = new DropDownItem(this::revealInFileExplorerMet, \"Reveal in File Explorer\");\n            DropDownItem copyFilePath = new DropDownItem(this::copyFolderPath, \"Copy Path\");\n            DropDownItem copyRelativeFilePath = new DropDownItem(this::copyRelativeFolderPath, \"Copy Relative Path\");\n            DropDownItem renameFile = new DropDownItem(this::renameFile, \"Rename\");\n            DropDownItem deleteFile = new DropDownItem(this::deleteFile, \"Delete\");\n            dropDown.addAllItems(newFolder, newFile, separator1, revealInExplorer, copyFilePath, copyRelativeFilePath, separator2, renameFile, deleteFile);\n        }\n        return dropDown;\n    }\n\n    private void revealInFileExplorerMet(MouseEvent event) {\n        try {\n            Runtime.getRuntime().exec(\"explorer \/select, \" + selectedFile.getAbsolutePath());\n            dropDown.hide();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void setContentInClipboard(String txt) {\n        Clipboard clipboard = Clipboard.getSystemClipboard();\n        ClipboardContent clipboardContent = new ClipboardContent();\n        clipboardContent.putString(txt);\n        clipboard.setContent(clipboardContent);\n    }\n\n    private void copyFilePath(MouseEvent mouseEvent) {\n        setContentInClipboard(fileAddresses.get(selectedFile.getName()));\n        dropDown.hide();\n    }\n\n    private void copyRelativeFilePath(MouseEvent mouseEvent) {\n        setContentInClipboard(selectedFile.getName());\n        dropDown.hide();\n    }\n\n    private void copyFolderPath(MouseEvent mouseEvent) {\n        setContentInClipboard(dirAddresses.get(selectedFile.getName()));\n        dropDown.hide();\n    }\n\n    private void copyRelativeFolderPath(MouseEvent mouseEvent) {\n        setContentInClipboard(selectedFile.getName());\n        dropDown.hide();\n    }\n\n    private void deleteFile(MouseEvent mouseEvent) {\n        try {\n            if (selectedFile.isDirectory()) {\n                FileUtils.deleteDirectory(selectedFile);\n                dirAddresses.remove(selectTreeItem.getValue());\n            }\n            else if (selectedFile.isFile()){\n                Files.deleteIfExists(Path.of(selectedFile.getAbsolutePath()));\n                fileAddresses.remove(selectTreeItem.getValue());\n            }\n            fileTree.getRoot().getChildren().remove(selectTreeItem);\n            fileTree.refresh();\n            fileTree.getSelectionModel().clearSelection();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        dropDown.hide();\n    }\n\n    private void renameFile(MouseEvent mouseEvent) {\n        CommandPalletDialogBox commandPalletDialogBox = new CommandPalletDialogBox(window, selectTreeItem, fileAddresses, dirAddresses);\n        commandPalletDialogBox.showRenameBox(window.getX()+(codeArea.getWidth()\/2), window.getY()+70, selectedFile);\n        dropDown.hide();\n    }\n\n    private void newFile(MouseEvent mouseEvent) {\n        CommandPalletDialogBox commandPalletDialogBox = new CommandPalletDialogBox(window, selectTreeItem, fileAddresses, dirAddresses);\n        commandPalletDialogBox.showNewNameBox(window.getX()+(codeArea.getWidth()\/2), window.getY()+70, selectedFile, true);\n        dropDown.hide();\n    }\n\n    private void newFolder(MouseEvent mouseEvent) {\n        CommandPalletDialogBox commandPalletDialogBox = new CommandPalletDialogBox(window, selectTreeItem, fileAddresses, dirAddresses);\n        commandPalletDialogBox.showNewNameBox(window.getX()+(codeArea.getWidth()\/2), window.getY()+70, selectedFile, false);\n        dropDown.hide();\n    }\n}\n","saved":true,"filePath":"E:\\try.java","opened":"true"},{"fileName":"try.py","data":"import pygame\nimport sys\n\nWIDTH, HEIGHT = 500,500\nWIN = pygame.display.set_mode((WIDTH, HEIGHT))\n\nwhile True:\n    for e in pygame.event.get():\n        if e.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n    print(\"Hello World\")\n    pygame.display.update()\n","saved":true,"filePath":"E:\\try.py","opened":"true"}],"opened folder":"E:\\Coding\\TextEditor"}